{
	"info": {
		"_postman_id": "622fc67f-94d2-4b12-b1f0-d2ffe9bc5576",
		"name": "GFLAPITest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Tests",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcc1f4d9-5edf-4c7a-9125-68abda1172fd",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.expect(jsonData).to.have.property(\"userId\");\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"mytestpassword\",\r\n    \"username\": \"Thanny\",\r\n    \"bnet\": \"Thanny#11667\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Create new user with same email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9923a7b-b0d7-449d-b3ea-d45422c3801e",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should return 409 conflict\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"mytestpassword2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80492520-ba28-44b2-83f0-f461766eed01",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "832b8f4e-0766-4540-9bd5-1f8b176192ba",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"jwt_token\", jsonData.jwt_token);\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.expect(jsonData).to.have.property(\"jwt_token\");\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"mytestpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Patch user sr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d164b524-3ead-4f89-a3cd-17e855c7d815",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\"propName\": \"tankSR\", \"value\": 2500},\r\n    {\"propName\": \"dpsSR\", \"value\": 2800},\r\n    {\"propName\": \"supportSR\", \"value\": 2300}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Get user sr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "540e85b2-b0a8-4b76-b65a-8827162bbe93",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check user sr\", function () {\r",
									"    const tankSR = jsonData.data.items[0].tankSR;\r",
									"    const dpsSR = jsonData.data.items[0].dpsSR;\r",
									"    const supportSR = jsonData.data.items[0].supportSR;\r",
									"    pm.expect(tankSR).to.eql(2500);\r",
									"    pm.expect(dpsSR).to.eql(2800);\r",
									"    pm.expect(supportSR).to.eql(2300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/sr/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"sr",
								""
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Delete new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af7adcb5-92ad-4983-864a-2887933f654d",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer wYuHX2W3JkMJ0UrHE92KrB3drtHSUiKg64MRWyKvJl2x5j2xiU7xjYBBi6j2cT78",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Team Tests",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e0bc8e1-1253-4ccf-a259-e422577f986e",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"mytestpassword\",\r\n    \"username\": \"Thanny\",\r\n    \"bnet\": \"Thanny#11667\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a71811e5-748f-4665-9b73-8783de415280",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"jwt_token\", jsonData.jwt_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"mytestpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Get teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94fcd904-f21a-46de-baf6-5423f6e99a54",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"number_of_teams\", jsonData.data.currentItemCount);\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": [
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				},
				{
					"name": "Create team without jwt token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0cfd1a6-ccee-463c-bfce-ac21a1dc0c18",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should have authentication error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "842c6761-cf8c-42dc-97b2-62631df0ef33",
								"exec": [
									"pm.environment.set(\"teamName\", \"test team\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"teamName\": {{teamName}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Create team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0787acc-9307-4d3e-97fb-cd24f4c5cbd3",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const teamId = jsonData.data.items[0]._id;\r",
									"postman.setEnvironmentVariable(\"teamId\", teamId);\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b9fcc31-a4f2-4430-aa3a-517c5f13199b",
								"exec": [
									"pm.environment.set(\"teamName\", \"test team\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"teamName\": \"{{teamName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Check team added to database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b025d2ae-1e05-457a-9a15-588787929b6d",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Team added\", function () {\r",
									"    pm.expect(jsonData.data.currentItemCount).to.eql(pm.environment.get(\"number_of_teams\") + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": [
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Add player to team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5165060c-0820-49b0-a193-099d840aba98",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8b11076-5e84-4777-ac93-f2a64523e785",
								"exec": [
									"pm.environment.set(\"teamName\", \"test team\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"playerId\": \"{{userId}}\",\r\n    \"playsTankForTeam\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}/players",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}",
								"players"
							]
						}
					},
					"response": [
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Patch user sr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f6f4068-023b-4c78-b6a7-0804c45c22f1",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\"propName\": \"tankSR\", \"value\": 2500},\r\n    {\"propName\": \"dpsSR\", \"value\": 2800},\r\n    {\"propName\": \"supportSR\", \"value\": 2300}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Get players from team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f60aaef-1257-44fa-acf6-2b55271dddb3",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check player sr\", function () {\r",
									"    const tankSR = jsonData.data.items[0].tankSR;\r",
									"    const dpsSR = jsonData.data.items[0].dpsSR;\r",
									"    const supportSR = jsonData.data.items[0].supportSR;\r",
									"    pm.expect(tankSR).to.eql(2500);\r",
									"    pm.expect(dpsSR).to.eql(2800);\r",
									"    pm.expect(supportSR).to.eql(2300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}/players",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}",
								"players"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Delete player from team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8805ec3d-e586-4756-b9a3-a1f72b4e33d5",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check player was deleted\", function () {\r",
									"    const players = jsonData.data.items[0].players.length;\r",
									"    pm.expect(players).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}/players/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}",
								"players",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				},
				{
					"name": "Get team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bcae4b9-3f84-41a5-bda6-0f8fb1f383d1",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check team name\", function () {\r",
									"    const teamName = jsonData.data.items[0].name;\r",
									"    pm.expect(teamName).to.eql(pm.environment.get(\"teamName\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Patch team name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c0fb68-e9e3-40fa-9b77-5d6ab212b01e",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\"propName\": \"name\", \"value\": \"newName\"}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Check name change",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61bce814-e700-43dd-a3c1-3f021323f510",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"check team name\", function () {\r",
									"    const teamName = jsonData.data.items[0].name;\r",
									"    pm.expect(teamName).to.eql(\"newName\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Delete team without jwt token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a350e20d-b4c0-4f09-af77-08b0e5591163",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should should be okay\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						}
					]
				},
				{
					"name": "Delete team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1fa9e77-b477-43f4-8500-3d257d0c4e77",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bear {{jwt_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/{{teamId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"{{teamId}}"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				},
				{
					"name": "Check team deleted from database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db019297-1bd7-449b-a997-37d5fa07052f",
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Team added\", function () {\r",
									"    pm.expect(jsonData.data.currentItemCount).to.eql(pm.environment.get(\"number_of_teams\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": [
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8311f842-2b3e-4115-bdd4-102047481b44",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer wYuHX2W3JkMJ0UrHE92KrB3drtHSUiKg64MRWyKvJl2x5j2xiU7xjYBBi6j2cT78",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						},
						{
							"name": "User successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"user created\"\n}"
						},
						{
							"name": "User email already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 409,\n \"message\": \"unable to create user as email already exists\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "baseUrl",
			"key": "baseUrl",
			"value": "http://localhost:3000/v1/api",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}